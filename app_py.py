# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e56Gc969c1mD2__X2OE2SeYaJExPfEm1
"""

import gradio as gr
import pandas as pd
import numpy as np
import pickle
import os
from prophet import Prophet
import matplotlib.pyplot as plt

# --- Configuration ---
# Set your relative path to the directory containing your models in the GitHub repo
MODELS_DIR = ''  # Changed from absolute Colab path
SALES_MODEL_PATH = os.path.join(MODELS_DIR, 'sales_trend_prophet_model.pkl')
TOP_PRODUCTS_PATH = os.path.join(MODELS_DIR, 'top_products.pkl')

# --- Helper Function to Load Models (Cached for efficiency) ---
def load_model(path):
    """Loads a pickled model from the specified path."""
    try:
        with open(path, 'rb') as f:
            model = pickle.load(f)
        print(f"Loaded model from: {path}")
        return model
    except FileNotFoundError:
        print(f"Error: Model file not found at {path}. Please ensure your models are directly in the same folder as 'app.py' and you've pushed them to your GitHub repo.")
        return None
    except Exception as e:
        print(f"Error loading model from {path}: {e}")
        return None

# --- Gradio Interface ---
def forecast_sales(periods):
    sales_model = load_model(SALES_MODEL_PATH)
    if sales_model is None:
        return "Sales trend model is not available."

    future = sales_model.make_future_dataframe(periods=periods)
    forecast = sales_model.predict(future)

    # Create plots
    fig1 = sales_model.plot(forecast)
    plt.title('Overall Daily Sales Forecast', fontsize=16)
    plt.xlabel('Date', fontsize=12)
    plt.ylabel('Total Sales (Sterling)', fontsize=12)
    plt.grid(True, linestyle='--', alpha=0.6)

    fig2 = sales_model.plot_components(forecast)
    plt.suptitle('Overall Sales Forecast Components', fontsize=16, y=1.02)
    plt.tight_layout(rect=[0, 0.03, 1, 0.98])

    # Return both the dataframe and the plots
    return forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(periods), fig1, fig2

iface = gr.Interface(
    fn=forecast_sales,
    inputs=gr.Number(label="Enter number of future days to forecast (e.g., 30):", value=30, minimum=7, maximum=365, step=7),
    outputs=[
        gr.DataFrame(label="Forecast Data"),
        gr.Plot(label="Sales Forecast Plot"),
        gr.Plot(label="Sales Forecast Components")
    ],
    title="E-commerce Analytics Predictor",
    description="Forecasts overall sales trends based on historical data."
)

if __name__ == "__main__":
    iface.launch()