# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e56Gc969c1mD2__X2OE2SeYaJExPfEm1
"""

import gradio as gr
import pandas as pd
import numpy as np
import pickle
import os
from prophet import Prophet
import matplotlib.pyplot as plt
import seaborn as sns

# --- Configuration ---
MODELS_DIR = ''
SALES_MODEL_PATH = os.path.join(MODELS_DIR, 'sales_trend_prophet_model.pkl')
TOP_PRODUCTS_PATH = os.path.join(MODELS_DIR, 'top_products.pkl')

# --- Helper Function to Load Models ---
def load_model(path):
    try:
        with open(path, 'rb') as f:
            model = pickle.load(f)
        print(f"Loaded model from: {path}")
        return model
    except FileNotFoundError:
        print(f"Error: Model file not found at {path}")
        return None
    except Exception as e:
        print(f"Error loading model from {path}: {e}")
        return None

# --- Global Model Loading ---
print("Attempting to load models...")
sales_model = load_model(SALES_MODEL_PATH)
top_products = load_model(TOP_PRODUCTS_PATH)

demand_models = {}
if top_products:
    for p_code in top_products:
        model_path = os.path.join(MODELS_DIR, f'demand_prophet_model_{p_code}.pkl')
        model = load_model(model_path)
        if model:
            demand_models[p_code] = model
        else:
            print(f"Could not load demand model for product {p_code}.")
else:
    print("Could not load top products list.")
print("Model loading complete.")

# --- Plotting Style ---
sns.set_theme(style="whitegrid", palette="pastel")
plt.rcParams['figure.figsize'] = (10, 6)
plt.rcParams['font.size'] = 10

# --- Prediction Functions ---
def predict_overall_sales(periods):
    if sales_model is None:
        gr.Warning("Overall sales trend model not loaded.")
        return "Error: Model not loaded.", None, None
    future = sales_model.make_future_dataframe(periods=periods)
    forecast = sales_model.predict(future)

    # Rename columns for clarity in the output table
    output_df = forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(periods).copy()
    output_df.rename(columns={
        'ds': 'Date',
        'yhat': 'Predicted Daily Sales (Sterling)',
        'yhat_lower': 'Lower Confidence Bound (Sterling)',
        'yhat_upper': 'Upper Confidence Bound (Sterling)'
    }, inplace=True)

    fig1 = sales_model.plot(forecast)
    plt.title('Overall Daily Sales Forecast')
    plt.xlabel('Date')
    plt.ylabel('Total Sales (Sterling)')
    plt.grid(True, linestyle='--', alpha=0.6)
    plt.tight_layout()

    fig2 = sales_model.plot_components(forecast)
    plt.suptitle('Overall Sales Forecast Components', y=1.02)
    plt.tight_layout(rect=[0, 0.03, 1, 0.98])

    return output_df, fig1, fig2

def predict_product_demand(product_code, periods):
    if product_code not in demand_models:
        gr.Warning("Invalid or missing product model.")
        return "Error: Invalid or missing model.", None, None
    model = demand_models[product_code]
    future = model.make_future_dataframe(periods=periods)
    forecast = model.predict(future)

    # Rename columns for clarity in the output table
    output_df = forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(periods).copy()
    output_df.rename(columns={
        'ds': 'Date',
        'yhat': 'Predicted Daily Quantity',
        'yhat_lower': 'Lower Confidence Bound (Quantity)',
        'yhat_upper': 'Upper Confidence Bound (Quantity)'
    }, inplace=True)

    fig1 = model.plot(forecast)
    plt.title(f'Demand Forecast for Product {product_code}')
    plt.xlabel('Date')
    plt.ylabel('Quantity Sold')
    plt.grid(True, linestyle='--', alpha=0.6)
    plt.tight_layout()

    fig2 = model.plot_components(forecast)
    plt.suptitle(f'Forecast Components for Product {product_code}', y=1.02)
    plt.tight_layout(rect=[0, 0.03, 1, 0.98])

    return output_df, fig1, fig2

# --- Gradio UI Layout ---
custom_theme = gr.themes.Soft()

with gr.Blocks(theme=custom_theme, title="AI-Driven Sales and Product Demand Intelligence") as demo:
    # --- Header ---
    gr.Markdown("""
    # ðŸ“ˆ AI Powered Analytics Tool - By Divit Srivastava

    ## About This App
    ---
    This AI-Driven Sales and Product Demand Forecaster is a web application designed to predict future sales trends and specific product demand. It leverages historical e-commerce transaction data, specifically sourced from the **UCI Machine Learning Repository**, applying sophisticated time-series forecasting techniques. Developed using Python, the app utilizes libraries like **Prophet** for model building, **Pandas** for data handling, **Matplotlib** and **Seaborn** for data visualization, and **Gradio** for its interactive web interface. Based on data analysis, distinct pre-trained Prophet models predict both overall store sales and individual top-selling product demand, offering crucial insights for business optimization.

    ## How to Use
    ---
    Welcome to your intelligent analytics tool! To get started with forecasting, simply:

    1.  **Select Your Forecast Tab:** Choose between 'Overall Sales Forecast' to predict store-wide trends or 'Product Demand Forecast' for specific items.
    2.  **Input Future Days:** Enter the number of days you'd like to look ahead for the prediction.
    3.  **Choose a Product (for Demand Forecast):** If you're on the 'Product Demand Forecast' tab, use the dropdown to select a specific top-selling product.
    4.  **Click to Forecast:** Hit the 'Forecast Sales' or 'Forecast Demand' button to generate your prediction, which will display the forecast data table and interactive plots.
    """)

    # --- Tabs Section ---
    with gr.Tabs():
        with gr.Tab("Overall Sales Forecast"):
            gr.Markdown("### ðŸ”® Forecast Overall Sales")
            overall_days = gr.Number(
                label="Enter number of future days to forecast (e.g., 30):",
                value=30,
                minimum=7,
                maximum=365,
                step=7
            )
            overall_btn = gr.Button("Forecast Sales")

            # --- Updated Explanation for Negative Values (Overall Sales) ---
            gr.Markdown("""
            **Note on Negative Values:** Negative sales values in the forecast, indicate a **prediction of returned orders** for that period.
            """)
            # --- End Explanation ---

            overall_table = gr.DataFrame(label="Forecast Data")
            overall_plot = gr.Plot(label="Overall Sales Forecast Plot")
            overall_components = gr.Plot(label="Forecast Components")

            overall_btn.click(
                fn=predict_overall_sales,
                inputs=[overall_days],
                outputs=[overall_table, overall_plot, overall_components]
            )

        with gr.Tab("Product Demand Forecast"):
            gr.Markdown("### ðŸ“¦ Forecast Product Demand")
            product_selector = gr.Dropdown(
                label="Select a Product:",
                choices=list(demand_models.keys()) if top_products else ["No products loaded"],
                value=list(demand_models.keys())[0] if top_products else None,
                interactive=True
            )
            product_days = gr.Number(
                label="Enter number of future days to forecast:",
                value=30,
                minimum=7,
                maximum=365,
                step=7
            )
            product_btn = gr.Button("Forecast Demand")

            # --- Updated Explanation for Negative Values (Product Demand) ---
            gr.Markdown("""
            **Note on Negative Values:** Negative quantities in the forecast, indicate a **prediction of returned orders** for that specific product during that period.
            """)
            # --- End Explanation ---

            product_table = gr.DataFrame(label="Forecast Data")
            product_plot = gr.Plot(label="Demand Forecast Plot")
            product_components = gr.Plot(label="Forecast Components")

            product_btn.click(
                fn=predict_product_demand,
                inputs=[product_selector, product_days],
                outputs=[product_table, product_plot, product_components]
            )

    # --- Footer ---
    gr.Markdown("---\n*Developed with Python, Prophet, Pandas, Matplotlib, Seaborn, and Gradio.*")

# --- Launch App ---
if __name__ == "__main__":
    demo.launch()